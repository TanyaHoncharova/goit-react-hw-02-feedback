{"version":3,"sources":["components/Counter/FeedbackOptions.jsx","components/Counter/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","Good","Neutral","Bad","Total","Positive","className","Counter","state","good","neutral","bad","total","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedback","Math","ceil","handleGoodBtn","setState","prevState","handleNeutralBtn","handleBadBtn","type","onClick","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAmBeA,EAjBS,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjD,OACI,gCACA,oBAAIC,UAAU,QAAd,wBACJ,qBAAIA,UAAU,YAAd,UACI,wCAAWL,EAAX,OACA,4CAAeC,EAAf,OACA,uCAAUC,EAAV,OACA,yCAAYC,IAAZ,OACA,qDAAwBC,IAAxB,gBCgEOE,G,kNArEXC,MAAQ,CACRC,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAM,G,EAKNC,mBAAqB,WAEjB,OADsB,EAAKL,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAI5EG,gCAAkC,WAC9B,IAAMC,EAAoB,EAAKP,MAAMC,KAAM,EAAKI,qBAAsB,IACtE,OAAOG,KAAKC,KAAKF,GAAmB,I,EAGxCG,cAAgB,WACZ,EAAKC,UAAS,SAAAC,GACV,MAAO,CACHX,KAAMW,EAAUX,KAAO,MAG/B,EAAKI,qBACL,EAAKC,mC,EAGTO,iBAAmB,WACf,EAAKF,UAAS,SAAAC,GACV,MAAO,CACHV,QAASU,EAAUV,QAAU,MAGrC,EAAKG,sB,EAGTS,aAAe,WACX,EAAKH,UAAS,SAAAC,GACV,MAAO,CACHT,IAAKS,EAAUT,IAAM,MAG7B,EAAKE,sB,4CAIT,WACI,OACI,sBAAKP,UAAU,cAAf,UACI,oBAAIA,UAAU,QAAd,mCACA,sBAAKA,UAAU,eAAf,UACI,wBAAQiB,KAAK,SAASC,QAASC,KAAKP,cAAeZ,UAAU,UAA7D,mBACJ,wBAAQiB,KAAK,SAASC,QAASC,KAAKJ,iBAAkBf,UAAU,UAAhE,sBACA,wBAAQiB,KAAK,SAASC,QAASC,KAAKH,aAAchB,UAAU,UAA5D,sBAEA,cAAE,EAAF,CACIL,KAAOwB,KAAKjB,MAAMC,KAClBP,QAASuB,KAAKjB,MAAME,QACpBP,IAAKsB,KAAKjB,MAAMG,IAChBP,MAAQqB,KAAKZ,mBACbR,SAAUoB,KAAKX,yC,GAhEbY,cCQPC,G,MARH,WACV,OACE,mCACE,cAAC,EAAD,kCCKSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eeb64bda.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst FeedbackOptions = ({Good, Neutral, Bad, Total, Positive})=>{\r\n    return(\r\n        <div>\r\n        <h2 className=\"title\" >Statistics</h2>\r\n    <ul className=\"statistic\">\r\n        <li>Good: {Good} </li>\r\n        <li> Neutral: {Neutral} </li>\r\n        <li>Bad: {Bad} </li>\r\n        <li>Total: {Total()} </li>\r\n        <li>Positive feedback: {Positive()} % </li>\r\n    </ul>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default FeedbackOptions;","import React, { Component } from 'react';\r\nimport FeedbackOptions from './FeedbackOptions'\r\nimport  './Counter.css';\r\n\r\nclass Counter extends Component  {\r\n\r\n    state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total:0,\r\n    \r\n    \r\n    };\r\n\r\n    countTotalFeedback = () => {\r\n        const totalFeedback = this.state.good + this.state.neutral + this.state.bad;\r\n        return totalFeedback;\r\n    };\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        const positiveFeedback = (this.state.good /this.countTotalFeedback())*100;\r\n        return Math.ceil(positiveFeedback ||0 );\r\n    }\r\n\r\n    handleGoodBtn = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                good: prevState.good + 1,\r\n            };\r\n        });\r\n        this.countTotalFeedback();\r\n        this.countPositiveFeedbackPercentage();\r\n    };\r\n\r\n    handleNeutralBtn = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                neutral: prevState.neutral + 1,\r\n            };\r\n        });\r\n        this.countTotalFeedback();\r\n    };\r\n\r\n    handleBadBtn = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                bad: prevState.bad + 1,\r\n            };\r\n        });\r\n        this.countTotalFeedback();\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"StatCounter\">\r\n                <h2 className=\"title\">Please leave feedback</h2>\r\n                <div className=\"BtnContainer\">\r\n                    <button type=\"button\" onClick={this.handleGoodBtn} className=\"statBtn\"> Good</button>\r\n                <button type=\"button\" onClick={this.handleNeutralBtn} className=\"statBtn\"> Neutral</button>\r\n                <button type=\"button\" onClick={this.handleBadBtn} className=\"statBtn\"> Bad </button>\r\n                </div>\r\n                < FeedbackOptions\r\n                    Good={ this.state.good}\r\n                    Neutral={this.state.neutral }\r\n                    Bad={this.state.bad}\r\n                    Total={ this.countTotalFeedback}\r\n                    Positive={this.countPositiveFeedbackPercentage} />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Counter;","import React, { Component } from \"react\";\nimport Counter from \"./components/Counter/Counter\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <>\n      <Counter> it is counter </Counter>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}