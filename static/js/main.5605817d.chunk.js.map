{"version":3,"sources":["components/Counter/FeedbackOptions.jsx","components/Counter/Statistics.jsx","components/Counter/Section.jsx","components/Counter/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","onHandleGoodBtn","onHandleNeutralBtn","onHandleBadBtn","className","type","onClick","Statistics","Good","Neutral","Bad","Total","Positive","Section","title","children","defaultProps","Notification","message","App","state","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","Math","ceil","handleGoodBtn","setState","prevState","handleNeutralBtn","handleBadBtn","totalFeedback","this","Component","percentageOfGoodFeedb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5605817d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions = ({onHandleGoodBtn, onHandleNeutralBtn, onHandleBadBtn}) => {\r\n    return (\r\n            <div className=\"BtnContainer\">\r\n                    <button type=\"button\" onClick={onHandleGoodBtn} className=\"statBtn\"> Good</button>\r\n                <button type=\"button\" onClick={onHandleNeutralBtn} className=\"statBtn\"> Neutral</button>\r\n                <button type=\"button\" onClick={onHandleBadBtn} className=\"statBtn\"> Bad </button>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default FeedbackOptions;","import React  from 'react';\r\n\r\nconst Statistics = ({Good, Neutral, Bad, Total, Positive})=>{\r\n    return(\r\n        <>\r\n    <ul className=\"statistic\">\r\n        <li>Good: {Good} </li>\r\n        <li> Neutral: {Neutral} </li>\r\n                <li>Bad: {Bad} </li>\r\n            </ul>\r\n        {(Total !== 0) ? \r\n        <>\r\n            <p><b>Total feedbacks: {Total}</b></p>\r\n                    <p>Positive feedbacks: <b>{Positive()}%</b></p>\r\n                    <h3>Thank you for yours feedback! </h3>\r\n        </> : \"No feedback given\"}\r\n    </>\r\n)};\r\n\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children}) => (\r\n<div>\r\n    {title && <h2>{title}</h2>}\r\n    {children}\r\n</div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: ''\r\n}\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <div className=\"Notification\">\r\n            <h2>{message}</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Notification;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport FeedbackOptions from \"./components/Counter/FeedbackOptions\";\nimport Statistics from \"./components/Counter/Statistics\";\nimport Section from \"./components/Counter/Section\";\nimport Notification from \"./components/Counter/Notification\";\nimport \"./App.css\";\n\nclass App extends Component {\n  static defaultProps = {\n    totalFeedback: 0,\n    percentageOfGoodFeedb: 0,\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const totalFeedback = this.state.good + this.state.neutral + this.state.bad;\n    return totalFeedback;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    const percentageOfGoodFeedb = Math.ceil(\n      (good / (good + neutral + bad)) * 100\n    );\n    return percentageOfGoodFeedb || 0;\n  };\n\n  handleGoodBtn = () => {\n    this.setState((prevState) => {\n      return {\n        good: prevState.good + 1,\n      };\n    });\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  handleNeutralBtn = () => {\n    this.setState((prevState) => {\n      return {\n        neutral: prevState.neutral + 1,\n      };\n    });\n    this.countTotalFeedback();\n  };\n\n  handleBadBtn = () => {\n    this.setState((prevState) => {\n      return {\n        bad: prevState.bad + 1,\n      };\n    });\n    this.countTotalFeedback();\n  };\n\n  render(totalFeedback) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Please leave feedback</h1>\n        </header>\n\n        <Section title=\"\">\n          <FeedbackOptions\n            onHandleGoodBtn={this.handleGoodBtn}\n            onHandleNeutralBtn={this.handleNeutralBtn}\n            onHandleBadBtn={this.handleBadBtn}\n          />\n        </Section>\n        {totalFeedback !== 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              Good={this.state.good}\n              Neutral={this.state.neutral}\n              Bad={this.state.bad}\n              Total={this.countTotalFeedback()}\n              Positive={this.countPositiveFeedbackPercentage}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback yet\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}